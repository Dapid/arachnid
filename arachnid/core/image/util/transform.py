# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.31
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

import _transform
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types




def integrate(*args):
  """
    This SWIG wrapper function downsamples an image
    	
    	.. note::
    		
    		Adopted from scikit-image

    	:Parameters:

    	img : array
    		  Integral image as a 2D array
       	r0, c0 : int
           		 Top-left corner of block to be summed.
       	r1, c1 : int
           		 Bottom-right corner of block to be summed.

       	:Returns:
    	
       	sum : int
           	  Sum over the given window.
    	
    """
  return _transform.integrate(*args)

def normalize_correlation(*args):
  """
    This SWIG wrapper function normalizes a cross-correlation
    	map using summed area tables aka integtral image.
    	
    	.. note::
    		
    		Adopted from scikit-image

    	:Parameters:

    	ccmap : array
    		 	2D array cross-correlation map
    	img_int : array
    			  Integral image
    	img_int_sq : array
    		   		 Integral image squared
    	trow, tcol : int
    				 Rows and columns of the template
    	ref_ssd : float
    			  Sum of squared for reference image
    	inv_area : float
    			   Inverse of the area for the reference image
    	
    """
  return _transform.normalize_correlation(*args)

